name: Build, Push to ECR, and Deploy to EC2
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PUBLIC_ECR_REPOSITORY_URI: public.ecr.aws/c4d3l3m6/demomonolithic
      IMAGE_TAG: latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Determine Build tool and run build
        run: |
          if [ -f "gradlew" ]; then
             chmod +x gradlew
            ./gradlew jibDockerBuild -Pprod -x test -x javadoc -x integrationTest --configure-on-demand
          else
            chmod +x mvnw
            ./mvnw -Pprod verify jib:dockerBuild -DskipTests -Dmaven.javadoc.skip=true -DskipITs -C
          fi

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag demomonolithic public.ecr.aws/c4d3l3m6/demomonolithic:latest
          docker push public.ecr.aws/c4d3l3m6/demomonolithic:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      PUBLIC_ECR_REPOSITORY_URI: public.ecr.aws/c4d3l3m6/demomonolithic:latest
      ECR_REPOSITORY: demomonolithic
      IMAGE_TAG: latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: SSH into EC2 and Deploy Docker Image
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-keypair.pem
          chmod 600 ~/.ssh/ec2-keypair.pem
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2-keypair.pem ec2-user@${{ secrets.EC2_IP }} <<EOF

            sudo dnf update -y
            sudo dnf install -y docker git
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            newgrp docker

            if ! command -v aws &> /dev/null; then
              sudo apt install -y awscli
            fi

            DOCKER_COMPOSE_VERSION="2.20.2"
            sudo rm -f /usr/local/bin/docker-compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

            docker pull public.ecr.aws/c4d3l3m6/demomonolithic:latest

            if [ -d "demoMonolithic/.git" ]; then
              cd demomonolithic
              git pull origin main
            else
              git clone https://github.com/RahulKMishraDev/demoMonolithic
              cd demoMonolithic
            fi

            docker-compose down
            docker-compose up -d --force-recreate
          EOF
